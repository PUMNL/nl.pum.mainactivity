<?php

require_once('debriefing.inc');

function _mainactivity_dis_agree_expert_link($case_type) {
  $c = mainactivity_debriefing::singleton();
  $case_types = explode(CRM_Core_DAO::VALUE_SEPARATOR, $case_type);
  if (in_array($c->advice, $case_types)) { 
    return 'customer/proposed-experts/dis-agree-advice'; 
  } elseif (in_array($c->seminar, $case_types)) { 
    return 'customer/proposed-experts/dis-agree-seminar'; 
  } elseif (in_array($c->remote_coaching, $case_types)) { 
    return 'customer/proposed-experts/dis-agree-remote-coaching'; 
  }
  return '';
}

function _mainactivity_accept_main_proposal_link($case_type) {
  $c = mainactivity_debriefing::singleton();
  $case_types = explode(CRM_Core_DAO::VALUE_SEPARATOR, $case_type);
  if (in_array($c->advice, $case_types)) { 
    return 'expert/accept-advisory-mission'; 
  } elseif (in_array($c->seminar, $case_types)) { 
    return 'expert/accept-seminar'; 
  } elseif (in_array($c->remote_coaching, $case_types)) { 
    return 'expert/accept-remote-coaching'; 
  }
  return '';
}

function _mainactivity_reject_main_proposal_link($case_type) {
  $c = mainactivity_debriefing::singleton();
  $case_types = explode(CRM_Core_DAO::VALUE_SEPARATOR, $case_type);
  if (in_array($c->advice, $case_types)) { 
    return 'expert/reject-advice-proposal'; 
  } elseif (in_array($c->seminar, $case_types)) { 
    return 'expert/reject-seminar-proposal'; 
  } elseif (in_array($c->remote_coaching, $case_types)) { 
    return 'expert/reject-remote-coaching-proposal'; 
  }
  return '';
}

function _mainactivity_debriefing_link($activity_type, $case_type) {
  $c = mainactivity_debriefing::singleton();
  $case_types = explode(CRM_Core_DAO::VALUE_SEPARATOR, $case_type);
  if (((int) $activity_type) == $c->advice_debriefing_expert && in_array($c->advice, $case_types)) { 
    return 'expert/debriefing/advice'; 
  } elseif (((int) $activity_type == $c->advice_debriefing_customer) && in_array($c->advice, $case_types)) { 
    return 'customer/debriefing/advice';
  } elseif (((int) $activity_type == $c->advice_debriefing_rep) && in_array($c->advice, $case_types)) { 
    return 'representative/debriefing/advice';
  } elseif (((int) $activity_type) == $c->seminar_debriefing_expert && in_array($c->seminar, $case_types)) { 
    return 'expert/debriefing/seminar'; 
  } elseif (((int) $activity_type == $c->seminar_debriefing_customer) && in_array($c->seminar, $case_types)) { 
    return 'customer/debriefing/seminar';
  } elseif (((int) $activity_type == $c->seminar_debriefing_rep) && in_array($c->seminar, $case_types)) { 
    return 'representative/debriefing/seminar';
  } elseif (((int) $activity_type) == $c->remote_coaching_debriefing_expert && in_array($c->remote_coaching, $case_types)) { 
    return 'expert/debriefing/remote-coaching'; 
  } elseif (((int) $activity_type == $c->remote_coaching_debriefing_customer) && in_array($c->remote_coaching, $case_types)) { 
    return 'customer/debriefing/remote-coaching';
  } elseif (((int) $activity_type == $c->remote_coaching_debriefing_rep) && in_array($c->remote_coaching, $case_types)) { 
    return 'representative/debriefing/remote-coaching';
  }
  return '';
}

function _mainactivity_briefing_link($activity_type, $case_type) {
  $c = mainactivity_debriefing::singleton();
  $case_types = explode(CRM_Core_DAO::VALUE_SEPARATOR, $case_type);
  if (((int) $activity_type) == $c->briefing_expert_act && $c->validCaseTypes($case_types)) { 
    return 'expert/briefing/form'; 
  }
  return '';
}

function mainactivity_views_api() {
  return array('api' => 3.0);
}

function mainactivity_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'mainactivity'). '/views', '/.inc/');
  foreach ($files as $filepath => $file) {
    try {
      require $filepath;
      if (isset($view)) {
        $views[$view->name] = $view;
      }
    } catch (Exception $e) {
      //do nothing
    }
  }
  return $views;
}

function mainactivity_get_role_ids($roles) {
  $rids = array();
  $available_roles = user_roles();
  foreach($roles as $role) {
    $rid = array_search($role, $available_roles);
    if ($rid !== false) {
      $rids[$rid] = $rid;
    }
  }
  
  return $rids;
}

function mainactivity_form_webform_component_edit_form_alter(&$form, &$form_state) {
  $component = $form_state['build_info']['args'][1];
  if (!in_array($component['type'], array('hidden'))) {
    return;
  }
  
  if (!isset($form['#node']->webform_civicrm)) {
    return;
  }
  
  $form['civicrm_options_fieldset']['force_default_value'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force default value'),
    '#default_value' => _mainactivity_get_force_default_value($component),
  );
}

function mainactivity_webform_component_presave(&$component) {
  if (!isset($component['civicrm_options_fieldset']['force_default_value'])) {
    return;
  }
  $component['extra']['force_default_value'] = $component['civicrm_options_fieldset']['force_default_value'] ? true : false;
}

function _mainactivity_get_force_default_value(array $component) {
  $enabled = false;
  if (isset($component['extra']['force_default_value'])) {
    $enabled = (bool) $component['extra']['force_default_value'];
  }
  return $enabled;
}

function mainactivity_webform_submission_presave($node, &$submission) {
  foreach($submission->data as $cid => $value) {
    //check if this component has force default value
    $component = $node->webform['components'][$cid];
    if (isset($component['extra']["force_default_value"]) && $component['extra']["force_default_value"]) {
      $submission->data[$cid][0] = $component['value'];
    }
  }
}

function mainactivity_module_implements_alter(&$module_list, $context){
  if($context === "webform_submission_presave"){
    $old_module_list = $module_list;
    $module_list = array();
    foreach($old_module_list as $module => $key) {
      if ($module == 'webform_civicrm') {
        $module_list['mainactivity'] = $old_module_list['mainactivity'];
      }
      if ($module != 'mainactivity') {
        $module_list[$module] = $key;
      }
    }
  }
}